Tutoriel corrigé pour osmo-trx dans Docker Debian Buster
1. Pull et lancer le container Docker Debian Buster

docker pull debian:buster

docker run -tid --privileged \
  -v /dev/bus/usb:/dev/bus/usb \
  -v /dev:/dev \
  -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
  -v $XAUTHORITY:/home/user/.Xauthority:ro \
  --net=host \
  --env="DISPLAY=$DISPLAY" \
  --env="LC_ALL=C.UTF-8" \
  --env="LANG=C.UTF-8" \
  --name karlibts_usrp debian:buster

xhost +

2. Entrer dans le container

docker exec -ti karlibts_usrp /bin/bash


3. Mettre à jour les sources et désactiver la vérification de validité des dépôts archivés

cat > /etc/apt/sources.list <<EOF
deb http://archive.debian.org/debian buster main contrib non-free
deb http://archive.debian.org/debian-security buster/updates main
EOF

echo 'Acquire::Check-Valid-Until "0";' > /etc/apt/apt.conf.d/99no-check-valid-until

apt update



4. Installer les dépendances essentielles (éviter doublons)

apt install -y nano wget libtool shtool automake dahdi-source libssl-dev sqlite3 libsqlite3-dev libsctp-dev libfftw3-dev autoconf libgnutls28-dev libcurl4-gnutls-dev git pkg-config make gcc gcc-arm-none-eabi doxygen libtalloc-dev libpcsclite-dev libusb-1.0-0-dev \
  autoconf automake build-essential ccache cmake cpufrequtils doxygen ethtool g++ inetutils-tools libboost-all-dev libncurses5 libncurses5-dev python3-dev python3-mako python3-numpy python3-requests python3-scipy python3-setuptools python3-ruamel.yaml \
  libuhd-dev uhd-host libortp-dev libdbi-dev libdbd-sqlite3 libpcap-dev libc-ares-dev libsofia-sip-ua-glib-dev libgsm1-dev asterisk telnet python3-pip netcat wireshark



5. Télécharger et installer les images UHD (firmware + FPGA)

uhd_images_downloader


ls -l /usr/share/uhd/images/



6. Tester la détection de la clé USRP
uhd_find_devices
uhd_usrp_probe

Si uhd_usrp_probe échoue à charger le firmware, vérifier les droits USB ou relancer le container.


7. Installer libosmocore (version spécifique compatible)

git clone https://git.osmocom.org/libosmocore.git
cd libosmocore/
git checkout cf70aa0c40c574c32b832454f725cc37459c5d8d
autoreconf -i
./configure
make -j$(nproc)
make install
ldconfig
cd ..



8. Installer libosmo-abis
git clone https://git.osmocom.org/libosmo-abis.git
cd libosmo-abis/
git checkout 39dffb6c29a8d78ba8527aa4ccc13f34d1c3b319
autoreconf -i
./configure
make -j$(nproc)
make install
ldconfig
cd ..



9. Installer libosmo-netif

git clone https://git.osmocom.org/libosmo-netif.git
cd libosmo-netif/
git checkout 09c71b04f5a8d82515d0d4d541b8368b585dbd31
autoreconf -i
./configure
make -j$(nproc)
make install
ldconfig
cd ..


10. Installer OpenBSC (version compatible)
git clone https://git.osmocom.org/openbsc.git
cd openbsc/openbsc/
git checkout d2550da76f9974bb1957f74c5d3eb75fdae923d9
autoreconf -i
./configure
make -j$(nproc)
make install
ldconfig
cd ../..


11. Installer Osmo-BTS

git clone https://git.osmocom.org/osmo-bts.git
cd osmo-bts/
git checkout 59e7773055335a12d749faf84d88a8ed9fa0f201
autoreconf -i
./configure --enable-trx
make -j$(nproc)
make install
ldconfig
cd ..



12. Installer osmo-trx (version compatible avec libosmocore cf70aa0)
git clone https://gitea.osmocom.org/cellular-infrastructure/osmo-trx.git
cd osmo-trx
git checkout 6e369348b026006bb483b7d3eb57ce5828e5f6bc
autoreconf -i
./configure --with-uhd
make -j$(nproc)
make install
ldconfig
cd ..


13. Configurer osmo-trx-uhd.cfg (exemple simplifié, sans fréquence, gestion par openbsc)
log stderr
 logging filter all 1
 logging color 1
 logging print category 1
 logging timestamp 1
 logging print file basename
 logging level set-all notice
!
line vty
 no login
!
trx
 bind-ip 127.0.0.1
 remote-ip 127.0.0.1
 egprs disable
 tx-sps 4
 rx-sps 4
 clock-ref external
 chan 0



14. Récupérer les configs pour osmo-bts et open-bsc

wget https://raw.githubusercontent.com/SitrakaResearchAndPOC/CalypsoBTS_Debian/main/osmo-bts.cfg
wget https://raw.githubusercontent.com/SitrakaResearchAndPOC/CalypsoBTS_Debian/main/open-bsc.cfg
touch hlr.sqlite3

15. Lancer les services dans différents terminaux DockerTerminal 1 (osmo-trx) :

docker exec -ti karlibts_usrp osmo-trx-uhd -C osmo-trx-uhd.cfg


docker exec -ti karlibts_usrp osmo-nitb -c open-bsc.cfg -l hlr.sqlite3 -P -C --debug=DRLL:DCC:DMM:DRR:DRSL:DNM

docker exec -ti karlibts_usrp osmo-bts-trx -c osmo-bts.cfg --debug DRSL:DOML:DLAPDM -i 127.0.0.1
	

Notes / conseils

Si tu as des erreurs firmware UHD, vérifie que /usr/share/uhd/images/usrp_b200_fw.hex existe bien et est valide.

Toujours utiliser ldconfig après make install pour que les libs soient bien prises en compte.

Ajuste le nombre de jobs -j dans make -j$(nproc) selon ta machine.

Vérifie que la clé USRP est bien détectée dans Docker avec uhd_find_devices avant de lancer osmo-trx.

Pour les droits USB, l’option --privileged et le montage /dev/bus/usb dans Docker devraient suffire.

Tu peux ajuster le bind-ip et remote-ip dans la config osmo-trx selon ton réseau (localhost dans ton cas).


